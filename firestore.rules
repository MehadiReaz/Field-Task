// Save this as firestore.rules and deploy with:
// firebase deploy --only firestore:rules

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ========== HELPER FUNCTIONS ==========
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Safe helper to check if user document exists
    function userExists() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }
    
    // Safe helper to get user role (returns null if user doesn't exist)
    function getUserRole() {
      return userExists() 
        ? get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role 
        : null;
    }
    
    function isAdmin() {
      return userExists() && getUserRole() == 'admin';
    }
    
    function isManager() {
      return userExists() && getUserRole() in ['admin', 'manager'];
    }
    
    function isAgent() {
      return userExists() && getUserRole() in ['admin', 'manager', 'agent'];
    }
    
    // Helper to check if user has access to task
    function hasTaskAccess() {
      return resource.data.createdBy == request.auth.uid ||
             resource.data.assignedTo == request.auth.uid;
    }
    
    // Helper to check if update is only marking task as expired
    function isExpiryUpdate() {
      // Allow if only updating status to expired and metadata
      let allowedFields = ['status', 'metadata', 'updatedAt'];
      let changedFields = request.resource.data.diff(resource.data).affectedKeys();
      
      return request.resource.data.status == 'expired' &&
             changedFields.hasOnly(allowedFields);
    }
    
    // ========== USERS COLLECTION ==========
    match /users/{userId} {
      // Allow user creation - any authenticated user can create their own profile
      allow create: if isAuthenticated() && isOwner(userId) && 
        request.resource.data.id == userId;
      
      // Users can read their own profile and all other users (for task assignment)
      allow read: if isAuthenticated();
      
      // Users can update their own profile
      allow update: if isAuthenticated() && isOwner(userId);
      
      // Users can delete their own profile
      allow delete: if isAuthenticated() && isOwner(userId);
    }
    
    // ========== TASKS COLLECTION ==========
    match /tasks/{taskId} {
      // Read: Any authenticated user can read tasks
      // - Tasks they created (createdBy)
      // - Tasks assigned to them (assignedTo)
      // - All tasks (simplified for now)
      allow read: if isAuthenticated();
      
      // List queries: Allow authenticated users to query all tasks
      allow list: if isAuthenticated();
      
      // Create: 
      // - Any agent can create tasks
      // - Validates that createdBy field matches authenticated user
      allow create: if isAgent() && 
        request.resource.data.createdBy == request.auth.uid;
      
      // Update:
      // - Allow expiry updates if user has task access (system operation)
      // - Agents can update tasks they created or are assigned to
      // - Managers can update any task
      // - Admins can update any task
      allow update: if isAuthenticated() && (
        // Allow automatic expiry updates for tasks user has access to
        (hasTaskAccess() && isExpiryUpdate()) ||
        // Normal update rules
        (isAgent() && hasTaskAccess()) ||
        (isManager()) ||
        (isAdmin())
      );
      
      // Delete:
      // - Managers can delete tasks
      // - Admins can delete tasks
      allow delete: if (isManager() || isAdmin());
      
      // ===== CHECK-INS SUBCOLLECTION =====
      match /checkIns/{checkinId} {
        // Any authenticated user can read check-ins for tasks they have access to
        allow read: if isAuthenticated();
        
        // Any authenticated user can create check-ins
        allow create: if isAuthenticated() && 
          request.resource.data.userId == request.auth.uid;
        
        // Users can update/delete their own check-ins
        allow update, delete: if isAuthenticated() && 
          resource.data.userId == request.auth.uid;
      }
      
      // ===== COMMENTS SUBCOLLECTION =====
      match /comments/{commentId} {
        // Any authenticated user can read comments
        allow read: if isAuthenticated();
        
        // Any authenticated user can create comments
        allow create: if isAuthenticated() && 
          request.resource.data.userId == request.auth.uid;
        
        // Users can update/delete their own comments
        allow update, delete: if isAuthenticated() && 
          resource.data.userId == request.auth.uid;
      }
    }
    
    // ========== SYNC QUEUE COLLECTION ==========
    match /syncQueue/{queueId} {
      // Users can read and write their own sync queue items
      allow read, write: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
    }
    
    // ========== TEAMS COLLECTION ==========
    match /teams/{teamId} {
      // Any authenticated user can read and write teams
      allow read, write: if isAuthenticated();
    }
    
    // ========== ANALYTICS COLLECTION ==========
    match /analytics/{document=**} {
      // Any authenticated user can read analytics
      allow read: if isAuthenticated();
      allow write: if false;  // Only backend Cloud Functions
    }
    
    // ========== DASHBOARD COLLECTION ==========
    // Stores task count statistics per user
    match /dashboard/{userId} {
      // Users can only read their own dashboard
      allow read: if isAuthenticated() && isOwner(userId);
      
      // System/server can write (backend operations)
      // In practice, this is updated by the app when online
      allow write: if isAuthenticated() && isOwner(userId);
    }
    
    // ========== AREAS COLLECTION ==========
    match /areas/{areaId} {
      // Any authenticated user can read areas
      allow read: if isAuthenticated();
      
      // Only managers and admins can create areas
      allow create: if isManager() || isAgent() &&
        request.resource.data.createdById == request.auth.uid;
      
      // Only managers and admins can update areas
      allow update: if isManager();
      
      // Only admins can delete areas
      allow delete: if isAdmin();
    }
    
    // ========== DEFAULT: DENY ALL ==========
    match /{document=**} {
      allow read, write: if false;
    }
  }
}